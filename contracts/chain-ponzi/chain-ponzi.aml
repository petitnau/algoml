glob int maxrounds   // max number of rounds for a user to withdraw 
glob int mindep      // minimum deposit in ALGO
glob int intR        // interest rate (percent)
glob int feeR        // fee rate (percent)

glob mut int balance // contract balance
glob mut int paying  // index of the next investor to be paid
glob mut int ctr     // total number of investors
glob mut int wdstart // start of the current withdraw period

loc mut int deposit  // amount of ALGOs the user can withdraw
loc mut int pos      // user position in the payment queue

@gstate -> notpaying
Create init(int intR, int feeR, int mindep, int maxrounds) {
    glob.intR = intR
    glob.feeR = feeR
    glob.mindep = mindep
    glob.maxrounds = maxrounds
    glob.balance = 0
    glob.paying = 0
    glob.ctr = 0
}

// any user can join the payment queue by providing a deposit (at least mindep)
// the contract creator takes a fee on every deposit.
// After a join the contract has a nonzero balance, 
// so the state is set to "paying" and the clock wdstart is set to the current round
@gstate -> paying
@round $r
@pay $v of ALGO : caller -> escrow
@pay (v * glob.feeR / 100) of ALGO : escrow -> creator
@assert v >= glob.mindep
OptIn join() {
    loc.deposit = v + (v * glob.intR) / 100
    loc.pos = glob.ctr
    glob.ctr += 1
    glob.balance += v
    glob.wdstart = r
}

// if the next user in the queue does not redeem within maxrounds,
// anyone can make the queue advance to the next user
@gstate paying -> notpaying
@round (glob.wdstart + glob.maxrounds, )
@assert glob.paying < glob.ctr
next() { 
    glob.paying += 1
}

// if the contract balance is enough,
// the next user in the queue withdraws the deposit with interests
@gstate paying -> paying
@round (glob.wdstart,glob.wdstart + glob.maxrounds)$r
@pay caller.deposit of ALGO : escrow -> caller
@assert glob.balance > caller.deposit
@assert caller.pos == glob.paying
withdraw() {
    glob.balance -= caller.deposit
    glob.paying += 1
    caller.deposit = 0
    glob.wdstart = r
}

// if the contract balance is not enough,
// the next user in the queue withdraws the whole balance
@gstate paying -> notpaying
@round (glob.wdstart,glob.wdstart + glob.maxrounds)
@pay glob.balance of ALGO : escrow -> caller
@assert glob.balance <= caller.deposit
@assert caller.pos == glob.paying
withdraw() {
    if (glob.balance == caller.deposit) glob.paying += 1
    caller.deposit -= glob.balance
    glob.balance = 0
}
